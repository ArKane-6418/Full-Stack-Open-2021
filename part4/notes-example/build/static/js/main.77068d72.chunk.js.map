{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","baseUrl","exported","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","i","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.77068d72.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n// When we make the note its own component, we need to pass in the key\r\nconst Note = ({ note, toggleImportance }) => {\r\n  // Add button to toggle if a note is important or not\r\n  const label = note.important ? 'Make Unimportant' : 'Make Important'\r\n\r\n  return (\r\n    <li className=\"note\">\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n\r\n}\r\n\r\nexport default Note","const Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\n\r\n// Both the frontend and backend are at the same address so we use a relative URL\r\nconst baseUrl = '/api/notes'\r\n\r\n// Changing the url to this causes problems.\r\n// The issue is CORS (Cross-Origin Resource Sharing) which allows restricted resources on a web page to be requested\r\n// from another domain outside the domain from which the first resource was served\r\n\r\n// In our context, the problem is that the JS code of an app that runs in a browser can only communicate with a server\r\n// in the same origin. The server is at port 3001 while the frontend is at port 3000 so they have different origins\r\n\r\n// Note that .then still returns a promise. Since we're only using response.data, to make our life easier, we just\r\n// return a promise containing it\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\n// Since the keys and values have the same name, we can simplify it by removing the keys (ES6)\r\n\r\nconst exported = { getAll, create, update }\r\nexport default exported","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/notes'\n\n\nconst Footer = () => {\n  // Inline styling\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Joshua Ong, Full Stack Open 2021</em>\n    </div>\n  )\n}\n\n// In REST, individual data objects are called resources and are ffetched with a GET request\n// Creating a new resource involves making a POST request to the specified URL\nconst App = () => {\n\n  const [notes, setNotes] = useState([])\n\n  // How do we access data contained in form's input element?\n  // Let's look at controlled components\n\n  const [newNote, setNewNote] = useState('a new note...')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n\n\n  // When data arrives from server, the JS runtime calls the function registered as the event handler, which prints\n  // \"promise fulfilled\" to the console and stores the notes received into the state\n  // Upon the re-render, \"render 3 notes\" is printed to the console and the notes fetched from the server\n  // are rendered\n\n  // If we hardcode a note object into getAll that doesn't exist in the backend, trying to change one of the values\n  // will cause a 404 not found error. We handle it with a catch statement (recall the rejection state of a promise(\n  const hook = () => {\n      noteService\n        .getAll()\n        .then(initialNotes => {\n            console.log(\"promise fulfilled\")\n            setNotes(initialNotes)\n        })\n  }\n  useEffect(hook, [])\n\n  // Second parameter of useEffect is used to specify how often the effect is run\n  console.log('render', notes.length, 'notes')\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n\n  const addNote = (event) => {\n    // Prevents default action of submitting a form\n    event.preventDefault()\n    // Let server generate id for resources\n    const noteObject = {\n        content: newNote,\n        date: new Date().toISOString(),\n        important: Math.random() < 0.5,\n    }\n    // Create POST request here\n    noteService.create(noteObject)\n      .then(returnedNote => {\n        // Need to update the notes object for the new note to render on screen\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const toggleImportanceOf = (id) => {\n    // Find the note with the specified <id>\n    const note = notes.find(n => n.id === id)\n    // Change the note to update importance value\n    const changedNote = {...note, important: !note.important}\n    // Replace the old note with a PUT request and update notes array\n\n    // If the note id doesn't match, copy the original into the new array, otherwise we get the new note from response.data\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      // If we can't update the note, it means it no longer exists in the backend\n      // Therefore, we need to set our notes array to all the notes excluding the one that no longer exists\n      .catch(error => {\n        setErrorMessage(`The note '${note.content}' was already deleted from the server`)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        // setNotes(notes.filter(n => n.id !== id))\n      })\n    console.log(`Note ${id} is ${note.important ? \"important\" : \"unimportant\"}`)\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  // Each imported component needs a key element\n  // key gets passed in, but in the Note attributes even though we didn't define a note.key (because of the li tags)\n\n  // App component now controls behaviour of input because we assigned the component state to value\n  // Register an event handler that syncs changes made to input with component's state\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage}/>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) => <Note key={i} note={note} toggleImportance={() => toggleImportanceOf(note.id)}/>)}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange}/>\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer/>\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\n\n/* const promise = axios.get('http://localhost:3001/notes')\nconsole.log(promise)\n\nconst promise2 = axios.get('http.//localhost:3001/foobar')\nconsole.log(promise2)\n\n// Promise is an object representing the eventual completion or failure of an async operation\n\n// 3 distinct states\n// 1. Promise is pending: final value is not available yet\n// 2. Promise is fulfilled, operation has completed and final value is available (also called resolved)\n// 3. Promise is rejected, error prevented the final value from being determined\n\n// If and when we want to access the result of the operation represented by the promise, we must register an event\n// handler, which is achieved using .then():\n\npromise.then(response => console.log(response))\n\n*/\n\n// const notes = [\n//     {\n//         id: 1,\n//         content: 'HTML is easy',\n//         date: '2019-05-30T17:30:31.098Z',\n//         important: true\n//     },\n//     {\n//         id: 2,\n//         content: 'Browser can execute only JavaScript',\n//         date: '2019-05-30T18:39:34.091Z',\n//         important: false\n//     },\n//     {\n//         id: 3,\n//         content: 'GET and POST are the most important methods of HTTP protocol',\n//         date: '2019-05-30T19:20:14.298Z',\n//         important: true\n//     }\n// ]\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}
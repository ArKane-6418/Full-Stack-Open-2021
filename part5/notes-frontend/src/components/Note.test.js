import React from 'react'
import '@testing-library/jest-dom/extend-expect'
// fireEvent is key to clicking buttons and simulating text input
import { render, fireEvent } from '@testing-library/react'
import { prettyDOM } from '@testing-library/dom'
import Note from './Note'

// Get the coverage using npm test -- --coverage
// Writing tests for our React app

test('renders content', () => {

  // Event handler is mock function

  const note = {
    content: 'Component testing is done with react-testing-library',
    important: true
  }

  // Render the component in a format suitable for tests without rendering them to DOM
  // render returns an object with several properties, one of which is container, which contains all rendered HTML
  const component = render(
    <Note note={note}/>
  )


  // Gives us back the HTML generated by the component
  /*component.debug() */

  // Suppose we only want to print a portion of the component, we can do this with prettyDOM

  const li = component.container.querySelector('li')

  console.log(prettyDOM(li))

  // Create-react-app configures tests to be run in watch mode, so npm test will not exit after running all tests
  // It will wait for changes in the code

  // Several ways to check for content
  // Method 1: search for matching text from entire HTML code rendered by component
  expect(component.container).toHaveTextContent(
    'Component testing is done with react-testing-library'
  )

  // Method 2: return the element that contains the given text and check for existence
  /* const element = component.getByText('Component testing is done with react-testing-library')
  expect(element).toBeDefined()

  // Method 3: search for specific element with querySelector that takes CSS selector as argument
  const div = component.container.querySelector('.note')
  expect(div).toHaveTextContent(
    'Component testing is done with react-testing-library'
  )
  */
})

test('clicking the button calls event handler once', () => {

  const note = {
    content: 'Component testing is done with react-testing-library',
    important: true
  }

  const mockHandler = jest.fn()

  const component = render(
    <Note note={note} toggleImportance={mockHandler} />
  )

  const button = component.getByText('Make Unimportant')
  fireEvent.click(button)

  // We expect the mock function to only be called once
  expect(mockHandler.mock.calls).toHaveLength(1)
})